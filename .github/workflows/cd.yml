name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_run:
    workflows: ["CI Pipeline"]
    types: [completed]
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'push'

    permissions:
      contents: read
      packages: write

    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'

    environment:
      name: staging
      url: https://staging.your-domain.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}

    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.STAGING_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to staging
      run: |
        ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_HOST }} << 'EOF'
          set -e

          # Navigate to application directory
          cd /var/www/ppv-streaming-staging

          # Backup current version
          sudo cp -r /var/www/ppv-streaming-staging /var/backups/ppv-staging-$(date +%Y%m%d_%H%M%S)

          # Pull latest code
          sudo git fetch origin
          sudo git reset --hard origin/main

          # Install/update dependencies
          sudo -u www-data composer install --no-dev --optimize-autoloader

          # Run database migrations if any
          if [ -f database/migrations.sql ]; then
            mysql -u ${{ secrets.STAGING_DB_USER }} -p${{ secrets.STAGING_DB_PASS }} ${{ secrets.STAGING_DB_NAME }} < database/migrations.sql
          fi

          # Clear caches
          sudo -u www-data php artisan cache:clear || true
          sudo -u www-data php artisan config:clear || true

          # Restart services
          sudo systemctl reload php8.1-fpm
          sudo systemctl reload nginx

          # Health check
          curl -f http://localhost/health || exit 1

          echo "✅ Staging deployment completed successfully"
        EOF

    - name: Run staging tests
      run: |
        # Wait for deployment to settle
        sleep 30

        # Run smoke tests against staging
        curl -f https://staging.your-domain.com/health
        curl -f https://staging.your-domain.com/api/streams

    - name: Notify deployment
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          Staging deployment ${{ job.status }}
          Branch: ${{ github.ref }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v')

    environment:
      name: production
      url: https://your-domain.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.PRODUCTION_HOST }} >> ~/.ssh/known_hosts

    - name: Create maintenance page
      run: |
        ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          sudo cp /var/www/maintenance.html /var/www/ppv-streaming/public/maintenance.html
          sudo nginx -s reload
        EOF

    - name: Deploy to production
      run: |
        ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          set -e

          # Create backup
          sudo mkdir -p /var/backups/ppv-production
          sudo tar -czf /var/backups/ppv-production/backup-$(date +%Y%m%d_%H%M%S).tar.gz -C /var/www ppv-streaming

          # Navigate to application directory
          cd /var/www/ppv-streaming

          # Pull latest code
          sudo git fetch origin
          sudo git checkout ${{ github.ref_name }}

          # Install/update dependencies
          sudo -u www-data composer install --no-dev --optimize-autoloader

          # Run database migrations
          if [ -f database/migrations.sql ]; then
            mysql -u ${{ secrets.PRODUCTION_DB_USER }} -p${{ secrets.PRODUCTION_DB_PASS }} ${{ secrets.PRODUCTION_DB_NAME }} < database/migrations.sql
          fi

          # Clear caches and optimize
          sudo -u www-data php artisan cache:clear || true
          sudo -u www-data php artisan config:cache || true
          sudo -u www-data php artisan route:cache || true

          # Restart services
          sudo systemctl reload php8.1-fpm
          sudo systemctl reload nginx

          # Remove maintenance page
          sudo rm -f /var/www/ppv-streaming/public/maintenance.html
          sudo nginx -s reload

          echo "✅ Production deployment completed successfully"
        EOF

    - name: Run production health checks
      run: |
        # Wait for deployment to settle
        sleep 60

        # Comprehensive health checks
        curl -f https://your-domain.com/health
        curl -f https://your-domain.com/api/streams

        # Check admin panel
        response=$(curl -s -o /dev/null -w "%{http_code}" https://your-domain.com/admin)
        if [ $response -ne 200 ] && [ $response -ne 302 ]; then
          echo "❌ Admin panel health check failed with status $response"
          exit 1
        fi

        echo "✅ All health checks passed"

    - name: Update deployment status
      if: always()
      uses: chrnorm/deployment-status@v2
      with:
        token: '${{ github.token }}'
        state: '${{ job.status }}'
        deployment-id: ${{ steps.deployment.outputs.deployment-id }}

    - name: Notify production deployment
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#production'
        text: |
          🚀 Production deployment ${{ job.status }}
          Version: ${{ github.ref_name }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}

          ${{ job.status == 'success' && '✅ Deployment successful!' || '❌ Deployment failed!' }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    runs-on: ubuntu-latest
    if: failure() && needs.deploy-production.result == 'failure'
    needs: deploy-production

    environment:
      name: production

    steps:
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.PRODUCTION_SSH_KEY }}

    - name: Rollback production
      run: |
        ssh ${{ secrets.PRODUCTION_USER }}@${{ secrets.PRODUCTION_HOST }} << 'EOF'
          set -e

          echo "🔄 Starting rollback process..."

          # Find latest backup
          LATEST_BACKUP=$(ls -t /var/backups/ppv-production/backup-*.tar.gz | head -1)

          if [ -z "$LATEST_BACKUP" ]; then
            echo "❌ No backup found for rollback"
            exit 1
          fi

          echo "📦 Restoring from backup: $LATEST_BACKUP"

          # Stop services temporarily
          sudo systemctl stop php8.1-fpm

          # Restore from backup
          sudo rm -rf /var/www/ppv-streaming
          sudo tar -xzf $LATEST_BACKUP -C /var/www/

          # Restart services
          sudo systemctl start php8.1-fpm
          sudo systemctl reload nginx

          echo "✅ Rollback completed successfully"
        EOF

    - name: Verify rollback
      run: |
        sleep 30
        curl -f https://your-domain.com/health

    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: 'warning'
        channel: '#production'
        text: |
          🔄 Production rollback completed
          Previous deployment failed and has been rolled back
          Version: ${{ github.ref_name }}

          Please investigate the deployment failure.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}